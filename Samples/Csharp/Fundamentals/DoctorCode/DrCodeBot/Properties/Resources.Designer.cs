//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DrCodeBot.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DrCodeBot.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to greet a user.
        /// </summary>
        internal static string CHOICE_GREET {
            get {
                return ResourceManager.GetString("CHOICE_GREET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to build help options.
        /// </summary>
        internal static string CHOICE_HELP {
            get {
                return ResourceManager.GetString("CHOICE_HELP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to show delay indicators.
        /// </summary>
        internal static string CHOICE_TYPING {
            get {
                return ResourceManager.GetString("CHOICE_TYPING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://drcodebotnodejs.azurewebsites.net/assets/2x1_bust_shot.png.
        /// </summary>
        internal static string FACE_IMAGE_URL {
            get {
                return ResourceManager.GetString("FACE_IMAGE_URL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Welcome! I am Doctor Code. I am here to teach you few basic things about building a Skype bot. What do you want to learn today?.
        /// </summary>
        internal static string GREET {
            get {
                return ResourceManager.GetString("GREET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;pre&gt;private Activity HandleSystemMessage(Activity message, ConnectorClient connectorClient)
        ///{
        ///    if (message.Type == ActivityTypes.ContactRelationUpdate)
        ///    {
        ///        // send a welcome message when the user adds the bot
        ///        if (message.Action == ContactRelationUpdateActionTypes.Add)
        ///        {
        ///            Activity welcome = message.CreateReply();
        ///            welcome.Attachments.Add(CardFactory.getWelcomeCard().ToAttachment());
        ///            connectorClient.Conversations.ReplyToActivity(welcome) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GREET_CODE {
            get {
                return ResourceManager.GetString("GREET_CODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contact relation update event notifies the bot that a user had added the bot to the contact list. In MessageController class, Post method sees if the type of the activity is of system message, and delegates the message to the HandleSystemMessage method where we check its activity type. If the message type is a Contact Relation Update, we check if it is an &quot;add&quot; action and create a reply to send it to the users..
        /// </summary>
        internal static string GREET_EXPLAIN {
            get {
                return ResourceManager.GetString("GREET_EXPLAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bot should introduce itself to the user and give an excellent first impression. Let&apos;s learn how to greet a user on the first run..
        /// </summary>
        internal static string GREET_INTRO {
            get {
                return ResourceManager.GetString("GREET_INTRO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To learn more, read &lt;a href=&quot;https://docs.microsoft.com/en-us/bot-framework/dotnet/bot-builder-dotnet-activities&quot;&gt;Activities overview&lt;/a&gt;..
        /// </summary>
        internal static string GREET_MORE {
            get {
                return ResourceManager.GetString("GREET_MORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I sent you this greeting when we met for the first time. Let&apos;s look into the code!.
        /// </summary>
        internal static string GREET_TRY_MSG {
            get {
                return ResourceManager.GetString("GREET_TRY_MSG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can say or click &apos;greet a user&apos;, &apos;build help options&apos;, or &apos;show delay indicators&apos; to learn how to add those functionalities to your bot..
        /// </summary>
        internal static string HELP {
            get {
                return ResourceManager.GetString("HELP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;pre&gt;protected override async Task&amp;lt;string&amp;gt; PrepareAsync(IActivity item, CancellationToken token)
        ///{
        ///    var message = item as IMessageActivity;
        ///    if (message != null &amp;amp;&amp;amp; !string.IsNullOrWhiteSpace(message.Text))
        ///    {
        ///        if (message.Text.Equals(Resources.HELP_TRIGGER_TEXT, StringComparison.InvariantCultureIgnoreCase))
        ///        {
        ///            return message.Text;
        ///        }
        ///    }
        ///    return null;
        ///}&lt;/pre&gt;.
        /// </summary>
        internal static string HELP_CODE {
            get {
                return ResourceManager.GetString("HELP_CODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We use global message handlers to handle the &quot;help&quot; keyword. The code above shows how HelpDialog will be triggered in the HelpScorable class. Whenever the user sends the bot a message, PrepareAsync() method in HelpScorable class inspects to see if the message matches &quot;help&quot;. If so, we return the message to be used for scoring, and PostAsync() of the Scorable with the highest score will be triggered. In our PostAsync() method, we add the HelpDialog to the Dialog stack so that it will become the active dialog [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HELP_EXPLAIN {
            get {
                return ResourceManager.GetString("HELP_EXPLAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bot should provide help options to the user. Let&apos;s learn how to build these options..
        /// </summary>
        internal static string HELP_INTRO {
            get {
                return ResourceManager.GetString("HELP_INTRO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To learn more, read &lt;a href=&quot;https://docs.microsoft.com/en-us/bot-framework/dotnet/bot-builder-dotnet-global-handlers&quot;&gt;Implement global message handlers&lt;/a&gt;..
        /// </summary>
        internal static string HELP_MORE {
            get {
                return ResourceManager.GetString("HELP_MORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help.
        /// </summary>
        internal static string HELP_TITLE {
            get {
                return ResourceManager.GetString("HELP_TITLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to help.
        /// </summary>
        internal static string HELP_TRIGGER_TEXT {
            get {
                return ResourceManager.GetString("HELP_TRIGGER_TEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any time the user types in &apos;help&apos;, the message that you just received will be sent to assist users. Let&apos;s look into the code!.
        /// </summary>
        internal static string HELP_TRY_MSG {
            get {
                return ResourceManager.GetString("HELP_TRY_MSG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Doctor Code.
        /// </summary>
        internal static string NAME {
            get {
                return ResourceManager.GetString("NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;pre&gt;// Send the typing indicator for few seconds (10 sec)
        ///IMessageActivity typingIndicatorMessage = context.MakeMessage();
        ///typingIndicatorMessage.Type = ActivityTypes.Typing;
        ///typingIndicatorMessage.Text = null;
        ///await context.PostAsync(typingIndicatorMessage);
        ///await Task.Delay(10000);&lt;/pre&gt;.
        /// </summary>
        internal static string TYPING_CODE {
            get {
                return ResourceManager.GetString("TYPING_CODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code above in TypingButtonClickDialog&apos;s StartAsync method, sends the activity of type Typing to the user, which will show the typing indicator to the user. The typing indicator clears out when the bot sends a message..
        /// </summary>
        internal static string TYPING_EXPLAIN {
            get {
                return ResourceManager.GetString("TYPING_EXPLAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For time consuming operations, you want to visually inform user that the message from the bot is on its way. Let&apos;s learn how to use typing indicators..
        /// </summary>
        internal static string TYPING_INTRO {
            get {
                return ResourceManager.GetString("TYPING_INTRO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To learn more, read &lt;a href=&quot;https://docs.microsoft.com/en-us/bot-framework/dotnet/bot-builder-dotnet-activities&quot; &gt;Activities overview&lt;/a&gt;..
        /// </summary>
        internal static string TYPING_MORE {
            get {
                return ResourceManager.GetString("TYPING_MORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Let&apos;s try it out! I will indicate that I am typing for 10 seconds..
        /// </summary>
        internal static string TYPING_TRY_MSG_1 {
            get {
                return ResourceManager.GetString("TYPING_TRY_MSG_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Let&apos;s look into the code!.
        /// </summary>
        internal static string TYPING_TRY_MSG_2 {
            get {
                return ResourceManager.GetString("TYPING_TRY_MSG_2", resourceCulture);
            }
        }
    }
}
